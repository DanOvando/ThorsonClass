library( SpatialDeltaGLMM )
install.packages("SpatialDeltaGlmm")
library(TMB)
data(WCGBTS_Canary_example)
CPUE = WCGBTS_Canary_example$HAUL_WT_KG
devtools:: install_github("nwfsc-assess/geostatistical_delta-GLMM"
data( EBS_pollock_data )
devtools:: install_github("nwfsc-assess/geostatistical_delta-GLMM")
install.packages(devtools)
install.packages("devtools")
library(TMB)
library( SpatialDeltaGLMM )
devtools:: install_github("nwfsc-assess/geostatistical_delta-GLMM")
devtools:: install_github("nwfsc-assess/geostatistical_delta-GLMM")
library(TMB)
library( SpatialDeltaGLMM )
data(WCGBTS_Canary_example)
CPUE = WCGBTS_Canary_example$HAUL_WT_KG
X = cbind( "Intercept"=rep(1,length(CPUE)) )
# Step 1 -- make and compile template file
compile( "delta_model_v1.cpp" )
compile( "delta_model_v1.cpp" )
compile( "delta_model_v1.cpp" )
dgamma
mean(rgamma(10000,2*3,2))
linpred_i = 10
myPar = 3
mean(rgamma(10000,myPar*linpred_i,myPar))
compile( "delta_model_v1.cpp" )
dyn.load( dynlib("delta_model_v1") )
Params = list("b_j"=rep(0,ncol(X)), "theta_z"=c(0,0))
Data = list( "y_i"=CPUE, "X_ij"=X, "myMod" = 1)
Obj = MakeADFun( data=Data, parameters=Params, DLL="delta_model_v1")
Obj$fn( Obj$par )
